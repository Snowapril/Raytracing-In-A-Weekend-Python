1. 안녕하세요 파이썬을 이용한 레이트레이싱에 대해 발표하게 된 16학번 신지홍입니다.

2-3 . 게임에 관심이 있으신 분들은 RTX 그래픽카드를 들어보셨을거라 새악핳ㅂ니다

4. RTX 그래픽카드는 위키에서 레이트레이싱을 실시간으로 수행하기위한 인터페이스로 정의됩니다.

5. 이 사진은 레이트레이싱의 결과물입니다. 주로 영화와 같은 곳에서 CG를 생성해낼때 사용됩니다.

6. 예시로 설명드리자면, 3차원 좌표계에서 원점에 카메라가 있다고 가정하고, 어딘가에 격자모양의 스크린이 있고 그 뒤에 구 가 있다고 합시다.

7. 원점에서 격자의 구멍의 중앙으로 광선을 쏘게된다면, 일종의 벡터가 생성될 것입니다.
벡터의 시작점과 방향이 있으니, 벡터가 구를 만나는지, 아니면 뒤의 빈 배경을 만날지 등을 알 수 있을 것입니다. 구를 만난다면 구에 해당하는 색깔을 격자 구멍에 채우고, 배경을 만난다면 배경색깔을 격자 구멍에 채워 넣을 수 있을 것입니다. 

8. 그러나 현실에서 광선을 쏘게 되면 100% 흡수되는 것이 아니라, 일부는 흡수되고, 일부는 반사되어 다른 방향으로 다시 광선이 생성될 것입니다. 반사된 광선은 또, 반사되기 이전의 물체의 색에 영항을 받을 것입니다. 이를 계속 반복하다보면 격자의 구멍들이 모두 채워질것이고, 레이트레이싱이 끝이 나게 됩니다.

9. 레이트레이싱의 결과물을 보기 위해서는 이미지파일로 생성할 필요가 있는데, JPG나 PNG 이미지는 모듈없이 직접 생성하기가 어렵습니다. 이럴때 유용한 것이 PPM 포맷인데, 위에 P3, 가로크기, 세로크기, 색의 최대값 을 설정하고나면 포맷팅이 끝나게 됩니다. 그 뒤로는 가로크기 곱하기 세로크기 개수의 픽셀들의 RGB 색으로 채워넣으면 됩니다.

10. 간단하게 for문을 두개 사용하여, 모든 격자 구멍에 색을 정하고, PPM 파일에 이를 출력하면 

11 . 다음과 같은 그림을 볼 수 있습니다.

12. 다음으로는 구를 생성하는 과정입니다. 사전에, 격자의 위치를 z = -1 평면 위에있고 x와 y좌표가 -2, -1 부터 2, 1 까지로 정합니다. 그리고 구를 해당 격자 뒤에 배치시키겠습니다. 격자 구멍을 관통하는 광선이 구를 만나는지 안만나는지를 구하려면, 벡터의 방정식과 구의 방정식을 알아내야합니다.

13. 이중 for문으로 격자 구멍들을 순회한다고 했을 때, 임의의 구멍으로의 벡터를 B, 그리고 원점을 A라고 하겠습니다.

14. 벡터의 정의에 따라 원점의 좌표와 방향 벡터가 주어졌으니, 이 벡터를 이와같이 함수화 시킬 수 있습니다. 함수화 시켰으니 벡터위의 임의의 점을 p(t)라고 나타내겠습니다.

15. 구의 중심을 cx, cy, cz라고 하고 반지름을 R이라고 하겠ㅅ브니다. 그러면 구의 방정식을 구할 수 있을것이고

16. 구의 방정ㅇ식에서 x,y,z를 아까구한 벡터위의 점 p(t)로 바꿔, 방정식을 유도할 수 있을것입니다.

19. 방정식을 정리하고 정리하다보면 t에 관한 이차방정식 꼴이 되는데, 

20. 이차방정식이므로 근의공식을 이용할 수 있고, 그 이전에 근의공식의 루트안에 들어갈 식이 음수인지 0인지 양수인지로 교점의 개수를 구할수있ㅅ습니다. D가 0 이상이라면 격자의 구멍으로 쏜 광선이 구를 만났다고 판단할 수 있습니다.

21. 이런 과정을 통해 레이트레이싱을 하면, 결과물이 나옵니다. 그런데 ㅁ분명ㅇ 구의 방정식으로 유도하였는데, 결과물은 그냥 원처럼 보입니다.

22. 이는 어두운 부분은 어둡게, 밝은 부분은 밝게하는 shading이 있고 없고의 차이로, 다음 슬라이드부터 shading을 하는 방법을 소개하겠습니다.

23.shading model은 정말 다양하지만, 그중 간단한 lambertian shading model을 적용해보도록 하겠습니다.

24. 일반적으로 물체에 광선이 들어올때, 표면이 거칠다면 반사되는 광선은 뒤죽박죽으로 튈 것이고, 표면이 매끄럽다면 표면의 법선벡터에 대칭되는 반사광선을 생성할것입니다.

25. 다음과 같이 작은 구와 아래에 거대한 구가 있을때, 빛의 반사가 두 구의 사이에서 적극적으로 발생하게 될 것입니다. 이 과정에서 빛이 흡수되고 반사되고를 반ㅁ복하며, 서로의 색이 점점 혼합되고, 어두워지고 할 것입니다.

26. 그전에 광선이 부딪힌 점에서 반사광선을 구하기 위해서는, 먼저 구에서 그 교점에서의 법선벡터를 구해얗합니다.

27. 사실 교점을 이미 이전에 구했으므로, 

28.법선벡터를 구하는 것은 구의 중심에서 교점으로 벡터를 잇는다면, 그게 법선벡터가 될 것입니다.

29. 법선벡터가 잘 구해졌는지 확인하려면, 이미지로 볼 수밖에 없으므로, 0에서 1 사이의 실수값으로 표현해야합니다. 그러기 위해서 법선벡터를 길이가 1이 되도록 정규화합니다. 그러면 x,y,z의 값들이 -1에서 1사이의 값이 되므로, 이에 1을 더하고 반으로 나누게 되면 0에서 1사이 값이 됩니다.

30. 해당 값을 출력하게 되면 이런 결과가 나옵니다. 아래에있는 거대한 구는 위의 표면만 화면에 나오므로, 법선벡터가 주로 양의 y축 방향을 향하므로, rgb값중 G인 초록색이 뚜렷하게 나오는것을 볼 수있ㅇ고, 작은구도 잘 나왔습니다. 구의 테두리가 우둘투둘하게 보이는데, 해상도가 낮은것도 있지만, 이는 Computer graphics에서 Aliasing이라고 부르는 현상으로 컴퓨터가 색을 사각형 pixel단위로 밖에 표현하지 못하는데에 원인이 있습니다.

31.  이를 해결하는 방법은 넘어가고, Aliasing을 해결한 사진입ㄴ니다.

32. 법선벡터를 구했으니, 구에 들어온 광선에 반사되는 광선을 생성할 차례입니다.
구의 위쪽으로 광선이 들어온다고 했을떄, n1이 교점에서의 법선벡터고, v1은 거친표면에서 반사각이 뒤죽박죽인것을 나타내기위해 길이가 1인 랜덤 벡터입니다. 법선벡터와 이 랜덤벡터를 합성하게 되면 표면 밖으로 나오는 반사광선을 나타낼 수 있습니다. 위의 광선은 반사되어 배경을 만나니, 위ㅇ부분은 배경색깔이 혼합될것이고, 아래쪽으로 들어오는 광선은 다른 구를 만나, 색깔이 혼합되고 흡수되고를 반복해 색이 어둡게 나타낡것입니다.

33. 결과 이미지입니다. 그림자를 나타내게 별도로 코드를 짜지않았지만, 구와 구사이에서 광선의 반사가 반복되어 어두운 그림자가 생겼습니다. 

34. 여기서 좀더 하면 이런 이미지도 생성할 수 있는데, 너무 많고 시간도 없어서,..

35. 다음 내용은 레퍼런스만 남겨두고, 여러분들의 몫으로 남기도록 하겠습니다. 근데 레이트레이싱의 대략적인 컨셉ㅇ을 소개해드렸으니, 좀더 아이디어를 생각하여, 아까 이미지를 생성하는 이중 포문에서 for문을 하나 더 추가하거나 while 문으로 시간개념을 추가하여 CG 동영상을 만들수도 있을거 같습니다.
추가로 발표자료에 사용된 이미지를 만드는데 쓴 제 코드를 github에도 올려놓았습니다. 제가 파이썬을 그리 잘쓰는편이 아니라서 어디까지나 참고용으로만 써주시면 좋겠ㅅ브니다
감사합니다
